import  { Schema, Document, models, model } from 'mongoose';
//webauthn interface
export interface Credential {
    id: string;
    publicKey: string;
    transports?: AuthenticatorTransport[];
    counter: number;
  }
//typescript interface
export interface IUser extends Document {
  username: string;
  password:string;
  email: string;
  isPhoneVerified?:string;
 resetToken?:string;
 resetTokenExpiry?:Date;
  credentials?:Credential[];//optional passkey credentials
}

const credentialSchema = new Schema<Credential>(
    {
      id: { type: String, required: true }, // The credential ID generated by the authenticator (used as a unique identifier).
      publicKey: { type: String, required: true }, // The public key associated with the credential, used for verifying signatures.
      transports: [{ type: String }], // Optional. How the credential is transported (e.g., "usb", "ble", "nfc", "internal").
      counter: { type: Number, required: true }, // A counter used to detect cloned authenticators (ensures credentials aren't replayed).
    },
    { _id: false } // Prevents Mongoose from generating an extra _id field for each credential object.
  );
  


//basic schema
const userSchema = new Schema<IUser>(
  {
    username: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
      password: {
    type: String,
    required: true,
  },
   resetTokenExpiry:{type:Date,required:false},
  resetToken:{type:String,required:false},
  isPhoneVerified:{type:Boolean,required:false,default:false},
    credentials: { type: [credentialSchema], default: undefined }, // Optional

  
  },
  { timestamps: true }
);

// Avoid OverwriteModelError in dev
const User = models.User || model<IUser>('User', userSchema);

export default User;